/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Player, PlayerInterface } from "../Player";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
    ],
    name: "CreatePlayer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "UpdateLock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
    ],
    name: "UpdateName",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
    ],
    name: "canPlay",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
    ],
    name: "createPlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerLockUntil",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerName",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lockUntil",
        type: "uint256",
      },
    ],
    name: "updateLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610702806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630823d5f31461005c578063669f702c1461008c57806369b77d27146100bc5780639e88ac09146100d8578063dfc8bff114610108575b600080fd5b610076600480360381019061007191906104a0565b610124565b60405161008391906104e8565b60405180910390f35b6100a660048036038101906100a191906104a0565b610205565b6040516100b3919061051c565b60405180910390f35b6100d660048036038101906100d19190610563565b61021d565b005b6100f260048036038101906100ed91906104a0565b61039f565b6040516100ff91906105a9565b60405180910390f35b610122600480360381019061011d91906105f0565b6103b7565b005b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180156101b05750426000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b80156101fe57506000801b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b9050919050565b60016020528060005260406000206000915090505481565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561034d576309660180426102b8919061064c565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fdf631234129171de9a99c11eca9047bbb82c20e6552ad9957f83cf5ac12f695a82604051610340919061051c565b60405180910390a261039c565b3373ffffffffffffffffffffffffffffffffffffffff167fd233c06d4ea1951674097a5f9303fa126dfd057bae66d8a64a66de71350525f682604051610393919061051c565b60405180910390a25b50565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f411bd75403171ff0328d6d37b89bc5ef2e990929eab2aa24cb51055ec7ceb66d3360405161043291906106b1565b60405180910390a150565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061046d82610442565b9050919050565b61047d81610462565b811461048857600080fd5b50565b60008135905061049a81610474565b92915050565b6000602082840312156104b6576104b561043d565b5b60006104c48482850161048b565b91505092915050565b60008115159050919050565b6104e2816104cd565b82525050565b60006020820190506104fd60008301846104d9565b92915050565b6000819050919050565b61051681610503565b82525050565b6000602082019050610531600083018461050d565b92915050565b61054081610503565b811461054b57600080fd5b50565b60008135905061055d81610537565b92915050565b6000602082840312156105795761057861043d565b5b60006105878482850161054e565b91505092915050565b6000819050919050565b6105a381610590565b82525050565b60006020820190506105be600083018461059a565b92915050565b6105cd81610590565b81146105d857600080fd5b50565b6000813590506105ea816105c4565b92915050565b6000602082840312156106065761060561043d565b5b6000610614848285016105db565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061065782610590565b915061066283610590565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106975761069661061d565b5b828201905092915050565b6106ab81610462565b82525050565b60006020820190506106c660008301846106a2565b9291505056fea264697066735822122051bbd5bf41b5bc8c85ef6f16e6b43098c82f88a8303ef74f2846d5d4416ea9ba64736f6c634300080c0033";

type PlayerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PlayerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Player__factory extends ContractFactory {
  constructor(...args: PlayerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Player> {
    return super.deploy(overrides || {}) as Promise<Player>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Player {
    return super.attach(address) as Player;
  }
  override connect(signer: Signer): Player__factory {
    return super.connect(signer) as Player__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PlayerInterface {
    return new utils.Interface(_abi) as PlayerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Player {
    return new Contract(address, _abi, signerOrProvider) as Player;
  }
}
