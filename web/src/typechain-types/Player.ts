/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PlayerInterface extends utils.Interface {
  functions: {
    "canPlay(address)": FunctionFragment;
    "createPlayer(bytes32)": FunctionFragment;
    "playerLockUntil(address)": FunctionFragment;
    "playerName(address)": FunctionFragment;
    "updateLock(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canPlay"
      | "createPlayer"
      | "playerLockUntil"
      | "playerName"
      | "updateLock"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "canPlay", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createPlayer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerLockUntil",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "playerName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateLock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "canPlay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerLockUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateLock", data: BytesLike): Result;

  events: {
    "CreatePlayer(address,bytes32)": EventFragment;
    "UpdateLock(address)": EventFragment;
    "UpdateName(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatePlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateName"): EventFragment;
}

export interface CreatePlayerEventObject {
  player: string;
  name: string;
}
export type CreatePlayerEvent = TypedEvent<
  [string, string],
  CreatePlayerEventObject
>;

export type CreatePlayerEventFilter = TypedEventFilter<CreatePlayerEvent>;

export interface UpdateLockEventObject {
  player: string;
}
export type UpdateLockEvent = TypedEvent<[string], UpdateLockEventObject>;

export type UpdateLockEventFilter = TypedEventFilter<UpdateLockEvent>;

export interface UpdateNameEventObject {
  player: string;
  name: string;
}
export type UpdateNameEvent = TypedEvent<
  [string, string],
  UpdateNameEventObject
>;

export type UpdateNameEventFilter = TypedEventFilter<UpdateNameEvent>;

export interface Player extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canPlay(_player: string, overrides?: CallOverrides): Promise<[boolean]>;

    createPlayer(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    playerLockUntil(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerName(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    updateLock(
      _lockUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  canPlay(_player: string, overrides?: CallOverrides): Promise<boolean>;

  createPlayer(
    _name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  playerLockUntil(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  playerName(arg0: string, overrides?: CallOverrides): Promise<string>;

  updateLock(
    _lockUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canPlay(_player: string, overrides?: CallOverrides): Promise<boolean>;

    createPlayer(_name: BytesLike, overrides?: CallOverrides): Promise<void>;

    playerLockUntil(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerName(arg0: string, overrides?: CallOverrides): Promise<string>;

    updateLock(
      _lockUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreatePlayer(address,bytes32)"(
      player?: string | null,
      name?: null
    ): CreatePlayerEventFilter;
    CreatePlayer(player?: string | null, name?: null): CreatePlayerEventFilter;

    "UpdateLock(address)"(player?: null): UpdateLockEventFilter;
    UpdateLock(player?: null): UpdateLockEventFilter;

    "UpdateName(address,bytes32)"(
      player?: string | null,
      name?: null
    ): UpdateNameEventFilter;
    UpdateName(player?: string | null, name?: null): UpdateNameEventFilter;
  };

  estimateGas: {
    canPlay(_player: string, overrides?: CallOverrides): Promise<BigNumber>;

    createPlayer(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    playerLockUntil(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerName(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateLock(
      _lockUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canPlay(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPlayer(
      _name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    playerLockUntil(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateLock(
      _lockUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
