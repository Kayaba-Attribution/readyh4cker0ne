/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CTFsInterface extends utils.Interface {
  functions: {
    "challengeComplete(address,address)": FunctionFragment;
    "complete(address)": FunctionFragment;
    "createInstance(address)": FunctionFragment;
    "getInstance(address,address)": FunctionFragment;
    "instances(address,address)": FunctionFragment;
    "instancesFinished(address)": FunctionFragment;
    "instancesInit(address)": FunctionFragment;
    "players()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "challengeComplete"
      | "complete"
      | "createInstance"
      | "getInstance"
      | "instances"
      | "instancesFinished"
      | "instancesInit"
      | "players"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "challengeComplete",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "complete", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createInstance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instancesFinished",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "instancesInit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "players", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "challengeComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instancesFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instancesInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;

  events: {
    "CompleteInstance(address,address)": EventFragment;
    "CreateInstance(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompleteInstance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateInstance"): EventFragment;
}

export interface CompleteInstanceEventObject {
  player: string;
  instance: string;
}
export type CompleteInstanceEvent = TypedEvent<
  [string, string],
  CompleteInstanceEventObject
>;

export type CompleteInstanceEventFilter =
  TypedEventFilter<CompleteInstanceEvent>;

export interface CreateInstanceEventObject {
  player: string;
  instance: string;
}
export type CreateInstanceEvent = TypedEvent<
  [string, string],
  CreateInstanceEventObject
>;

export type CreateInstanceEventFilter = TypedEventFilter<CreateInstanceEvent>;

export interface CTFs extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CTFsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    challengeComplete(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    complete(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createInstance(
      _factory: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInstance(
      _player: string,
      _instance: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    instances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    instancesFinished(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    instancesInit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    players(overrides?: CallOverrides): Promise<[string]>;
  };

  challengeComplete(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  complete(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createInstance(
    _factory: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInstance(
    _player: string,
    _instance: string,
    overrides?: CallOverrides
  ): Promise<string>;

  instances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  instancesFinished(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  instancesInit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  players(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    challengeComplete(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    complete(_factory: string, overrides?: CallOverrides): Promise<void>;

    createInstance(_factory: string, overrides?: CallOverrides): Promise<void>;

    getInstance(
      _player: string,
      _instance: string,
      overrides?: CallOverrides
    ): Promise<string>;

    instances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    instancesFinished(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instancesInit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    players(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CompleteInstance(address,address)"(
      player?: string | null,
      instance?: null
    ): CompleteInstanceEventFilter;
    CompleteInstance(
      player?: string | null,
      instance?: null
    ): CompleteInstanceEventFilter;

    "CreateInstance(address,address)"(
      player?: string | null,
      instance?: null
    ): CreateInstanceEventFilter;
    CreateInstance(
      player?: string | null,
      instance?: null
    ): CreateInstanceEventFilter;
  };

  estimateGas: {
    challengeComplete(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    complete(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createInstance(
      _factory: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInstance(
      _player: string,
      _instance: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instancesFinished(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instancesInit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    players(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    challengeComplete(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    complete(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createInstance(
      _factory: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInstance(
      _player: string,
      _instance: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instancesFinished(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instancesInit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
